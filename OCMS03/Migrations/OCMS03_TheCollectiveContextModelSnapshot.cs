// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OCMS03.Data;

namespace OCMS03.Migrations
{
    [DbContext(typeof(OCMS03_TheCollectiveContext))]
    partial class OCMS03_TheCollectiveContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OCMS03.Data.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("OCMS03.Data.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("date");

                    b.Property<string>("AppointmentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("Arrived")
                        .HasColumnType("bit");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("HospitalId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnName("IPAddress")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<long?>("StaffNumber")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("StaffNumber");

                    b.ToTable("tblAppointment");
                });

            modelBuilder.Entity("OCMS03.Models.Content.AppointmentNotes", b =>
                {
                    b.Property<int>("AppointmentNotesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("DiagnosisCode")
                        .HasColumnType("int");

                    b.Property<string>("NotesComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StaffNumber")
                        .HasColumnType("bigint");

                    b.HasKey("AppointmentNotesId");

                    b.HasIndex("DiagnosisCode");

                    b.HasIndex("PatientId");

                    b.HasIndex("StaffNumber");

                    b.ToTable("tblAppointmentNotes");
                });

            modelBuilder.Entity("OCMS03.Models.Content.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("DistrictId");

                    b.ToTable("tblCity");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Clinic", b =>
                {
                    b.Property<int>("ClinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ClinicId");

                    b.HasIndex("CityId");

                    b.ToTable("tblClinic");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("DepartmentId");

                    b.ToTable("tblDepartment");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Diagnosis", b =>
                {
                    b.Property<int>("DiagnosisCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiagnosisComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DiagnosisDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("DiagnosisCode");

                    b.ToTable("tblDiagnosis");
                });

            modelBuilder.Entity("OCMS03.Models.Content.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("DistrictId")
                        .HasName("PK_tblRegion");

                    b.HasIndex("ProvinceId");

                    b.ToTable("tblDistrict");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Doctor", b =>
                {
                    b.Property<long>("StaffNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("date");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("ClinicId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int?>("HospitalId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnName("IPAddress")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Idnumber")
                        .IsRequired()
                        .HasColumnName("IDNumber")
                        .HasColumnType("nchar(13)")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("NextOfKinNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NextOfKinSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NextOfName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nchar(15)")
                        .IsFixedLength(true)
                        .HasMaxLength(15);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nchar(13)")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SuburbId")
                        .HasColumnType("int");

                    b.HasKey("StaffNumber")
                        .HasName("PK_tblDoctor_1");

                    b.HasIndex("CityId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SuburbId");

                    b.ToTable("tblDoctor");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Hospital", b =>
                {
                    b.Property<int>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("HospitalId");

                    b.HasIndex("CityId");

                    b.ToTable("tblHospital");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Laboratorist", b =>
                {
                    b.Property<long>("StaffNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("date");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnName("IPAddress")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Idnumber")
                        .IsRequired()
                        .HasColumnName("IDNumber")
                        .HasColumnType("nchar(13)")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("NextOfKinNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<string>("NextOfKinSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NextOfName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nchar(15)")
                        .IsFixedLength(true)
                        .HasMaxLength(15);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nchar(13)")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("SuburbId")
                        .HasColumnType("int");

                    b.HasKey("StaffNumber")
                        .HasName("PK_tblLaboratorist_1");

                    b.HasIndex("CityId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SuburbId");

                    b.ToTable("tblLaboratorist");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Nurse", b =>
                {
                    b.Property<long>("StaffNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("date");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("ClinicId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int?>("HospitalId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnName("IPAddress")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Idnumber")
                        .IsRequired()
                        .HasColumnName("IDNumber")
                        .HasColumnType("nchar(13)")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("NextOfKinNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<string>("NextOfKinSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NextOfName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NurseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nchar(15)")
                        .IsFixedLength(true)
                        .HasMaxLength(15);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nchar(13)")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("SuburbId")
                        .HasColumnType("int");

                    b.HasKey("StaffNumber")
                        .HasName("PK_tblNurse_1");

                    b.HasIndex("CityId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SuburbId");

                    b.ToTable("tblNurse");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("date");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nchar(15)")
                        .IsFixedLength(true)
                        .HasMaxLength(15);

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true)
                        .HasMaxLength(20);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnName("IPAddress")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Idnumber")
                        .IsRequired()
                        .HasColumnName("IDNumber")
                        .HasColumnType("nchar(15)")
                        .IsFixedLength(true)
                        .HasMaxLength(15);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("NextOfKinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NextOfKinNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("NextOfKinSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nchar(15)")
                        .IsFixedLength(true)
                        .HasMaxLength(15);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nchar(15)")
                        .IsFixedLength(true)
                        .HasMaxLength(15);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<long?>("StaffNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("SuburbId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true)
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StaffNumber");

                    b.HasIndex("SuburbId");

                    b.ToTable("tblPatient");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Pharmacist", b =>
                {
                    b.Property<long>("StaffNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("date");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnName("IPAddress")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Idnumber")
                        .IsRequired()
                        .HasColumnName("IDNumber")
                        .HasColumnType("nchar(13)")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("NextOfKinNumber")
                        .IsRequired()
                        .HasColumnType("nchar(13)")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("NextOfKinSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NextOfName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nchar(15)")
                        .IsFixedLength(true)
                        .HasMaxLength(15);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nchar(13)")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("SuburbId")
                        .HasColumnType("int");

                    b.HasKey("StaffNumber")
                        .HasName("PK_tblPharmasist_1");

                    b.HasIndex("CityId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SuburbId");

                    b.ToTable("tblPharmacist");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<bool>("PrescriptionStatus")
                        .HasColumnType("bit");

                    b.Property<long>("StaffNumber")
                        .HasColumnType("bigint");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StaffNumber");

                    b.ToTable("tblPrescription");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ProvinceId");

                    b.ToTable("tblProvince");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Receptionist", b =>
                {
                    b.Property<long>("StaffNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("date");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnName("IPAddress")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Idnumber")
                        .IsRequired()
                        .HasColumnName("IDNumber")
                        .HasColumnType("nchar(13)")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("NextOfKinNumber")
                        .IsRequired()
                        .HasColumnType("nchar(13)")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("NextOfKinSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NextOfName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nchar(15)")
                        .IsFixedLength(true)
                        .HasMaxLength(15);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nchar(13)")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("ReceptionistType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SuburbId")
                        .HasColumnType("int");

                    b.HasKey("StaffNumber")
                        .HasName("PK_tblReceptionist_1");

                    b.HasIndex("CityId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SuburbId");

                    b.ToTable("tblReceptionist");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Suburb", b =>
                {
                    b.Property<int>("SuburbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("SuburbName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("SuburbId");

                    b.HasIndex("CityId");

                    b.ToTable("tblSuburb");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("OCMS03.Data.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("OCMS03.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("OCMS03.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("OCMS03.Data.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("OCMS03.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Appointment", b =>
                {
                    b.HasOne("OCMS03.Models.Content.Clinic", "Clinic")
                        .WithMany("TblAppointment")
                        .HasForeignKey("ClinicId")
                        .HasConstraintName("FK_tblAppointment_tblClinic")
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Hospital", "Hospital")
                        .WithMany("TblAppointment")
                        .HasForeignKey("HospitalId")
                        .HasConstraintName("FK_tblAppointment_tblHospital")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Doctor", "StaffNumberNavigation")
                        .WithMany("TblAppointment")
                        .HasForeignKey("StaffNumber")
                        .HasConstraintName("FK_tblAppointment_tblDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Nurse", "StaffNumber1")
                        .WithMany("TblAppointment")
                        .HasForeignKey("StaffNumber")
                        .HasConstraintName("FK_tblAppointment_tblNurse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Receptionist", "StaffNumber2")
                        .WithMany("TblAppointment")
                        .HasForeignKey("StaffNumber")
                        .HasConstraintName("FK_tblAppointment_tblReceptionist")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.AppointmentNotes", b =>
                {
                    b.HasOne("OCMS03.Models.Content.Diagnosis", "DiagnosisCodeNavigation")
                        .WithMany("TblAppointmentNotes")
                        .HasForeignKey("DiagnosisCode")
                        .HasConstraintName("FK_tblAppointmentNotes_tblDiagnosis")
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Patient", "Patient")
                        .WithMany("TblAppointmentNotes")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_tblAppointmentNotes_tblPatient")
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Doctor", "StaffNumberNavigation")
                        .WithMany("TblAppointmentNotes")
                        .HasForeignKey("StaffNumber")
                        .HasConstraintName("FK_tblAppointmentNotes_tblDoctor1");

                    b.HasOne("OCMS03.Models.Content.Nurse", "StaffNumber1")
                        .WithMany("TblAppointmentNotes")
                        .HasForeignKey("StaffNumber")
                        .HasConstraintName("FK_tblAppointmentNotes_tblNurse");
                });

            modelBuilder.Entity("OCMS03.Models.Content.City", b =>
                {
                    b.HasOne("OCMS03.Models.Content.District", "District")
                        .WithMany("City")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_tblCity_tblDistrict")
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Clinic", b =>
                {
                    b.HasOne("OCMS03.Models.Content.City", "City")
                        .WithMany("TblClinic")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_tblClinic_tblCity")
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.District", b =>
                {
                    b.HasOne("OCMS03.Models.Content.Province", "Province")
                        .WithMany("TblDistrict")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_tblDistrict_tblProvince")
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Doctor", b =>
                {
                    b.HasOne("OCMS03.Models.Content.City", "City")
                        .WithMany("TblDoctor")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_tblDoctor_tblCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Clinic", "Clinic")
                        .WithMany("TblDoctor")
                        .HasForeignKey("ClinicId")
                        .HasConstraintName("FK_tblDoctor_tblClinic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Department", "Department")
                        .WithMany("TblDoctor")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_tblDoctor_tblDepartment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.District", "District")
                        .WithMany("TblDoctor")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_tblDoctor_tblDistrict")
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Hospital", "Hospital")
                        .WithMany("TblDoctor")
                        .HasForeignKey("HospitalId")
                        .HasConstraintName("FK_tblDoctor_tblHospital")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Province", "Province")
                        .WithMany("TblDoctor")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_tblDoctor_tblProvince")
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Suburb", "Suburb")
                        .WithMany("TblDoctor")
                        .HasForeignKey("SuburbId")
                        .HasConstraintName("FK_tblDoctor_tblSuburb")
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Hospital", b =>
                {
                    b.HasOne("OCMS03.Models.Content.City", "City")
                        .WithMany("TblHospital")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_tblHospital_tblCity")
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Laboratorist", b =>
                {
                    b.HasOne("OCMS03.Models.Content.City", "City")
                        .WithMany("TblLaboratorist")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_tblLaboratorist_tblCity");

                    b.HasOne("OCMS03.Models.Content.Department", "Department")
                        .WithMany("TblLaboratorist")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_tblLaboratorist_tblDepartment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.District", "District")
                        .WithMany("TblLaboratorist")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_tblLaboratorist_tblDistrict");

                    b.HasOne("OCMS03.Models.Content.Hospital", "Hospital")
                        .WithMany("TblLaboratorist")
                        .HasForeignKey("HospitalId")
                        .HasConstraintName("FK_tblLaboratorist_tblHospital")
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Province", "Province")
                        .WithMany("TblLaboratorist")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_tblLaboratorist_tblProvince");

                    b.HasOne("OCMS03.Models.Content.Suburb", "Suburb")
                        .WithMany("TblLaboratorist")
                        .HasForeignKey("SuburbId")
                        .HasConstraintName("FK_tblLaboratorist_tblSuburb")
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Nurse", b =>
                {
                    b.HasOne("OCMS03.Models.Content.City", "City")
                        .WithMany("TblNurse")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_tblNurse_tblCity");

                    b.HasOne("OCMS03.Models.Content.Clinic", "Clinic")
                        .WithMany("TblNurse")
                        .HasForeignKey("ClinicId")
                        .HasConstraintName("FK_tblNurse_tblClinic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Department", "Department")
                        .WithMany("TblNurse")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_tblNurse_tblDepartment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.District", "District")
                        .WithMany("TblNurse")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_tblNurse_tblDistrict");

                    b.HasOne("OCMS03.Models.Content.Hospital", "Hospital")
                        .WithMany("TblNurse")
                        .HasForeignKey("HospitalId")
                        .HasConstraintName("FK_tblNurse_tblHospital")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Province", "Province")
                        .WithMany("TblNurse")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_tblNurse_tblProvince");

                    b.HasOne("OCMS03.Models.Content.Suburb", "Suburb")
                        .WithMany("TblNurse")
                        .HasForeignKey("SuburbId")
                        .HasConstraintName("FK_tblNurse_tblSuburb")
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Patient", b =>
                {
                    b.HasOne("OCMS03.Models.Content.City", "City")
                        .WithMany("TblPatient")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_tblPatient_tblCity");

                    b.HasOne("OCMS03.Models.Content.District", "District")
                        .WithMany("TblPatient")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_tblPatient_tblDistrict");

                    b.HasOne("OCMS03.Models.Content.Province", "Province")
                        .WithMany("TblPatient")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_tblPatient_tblProvince");

                    b.HasOne("OCMS03.Models.Content.Doctor", "StaffNumberNavigation")
                        .WithMany("TblPatient")
                        .HasForeignKey("StaffNumber")
                        .HasConstraintName("FK_tblPatient_tblDoctor");

                    b.HasOne("OCMS03.Models.Content.Receptionist", "StaffNumber1")
                        .WithMany("TblPatient")
                        .HasForeignKey("StaffNumber")
                        .HasConstraintName("FK_tblPatient_tblReceptionist");

                    b.HasOne("OCMS03.Models.Content.Suburb", "Suburb")
                        .WithMany("TblPatient")
                        .HasForeignKey("SuburbId")
                        .HasConstraintName("FK_tblPatient_tblSuburb")
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Pharmacist", b =>
                {
                    b.HasOne("OCMS03.Models.Content.City", "City")
                        .WithMany("TblPharmacist")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_tblPharmasist_tblCity");

                    b.HasOne("OCMS03.Models.Content.Department", "Department")
                        .WithMany("TblPharmacist")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_tblPharmasist_tblDepartment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.District", "District")
                        .WithMany("TblPharmacist")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_tblPharmasist_tblDistrict");

                    b.HasOne("OCMS03.Models.Content.Province", "Province")
                        .WithMany("TblPharmacist")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_tblPharmasist_tblProvince");

                    b.HasOne("OCMS03.Models.Content.Suburb", "Suburb")
                        .WithMany("TblPharmacist")
                        .HasForeignKey("SuburbId")
                        .HasConstraintName("FK_tblPharmasist_tblSuburb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Prescription", b =>
                {
                    b.HasOne("OCMS03.Models.Content.Patient", "Patient")
                        .WithMany("TblPrescription")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_tblPrescription_tblPatient")
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Doctor", "StaffNumberNavigation")
                        .WithMany("TblPrescription")
                        .HasForeignKey("StaffNumber")
                        .HasConstraintName("FK_tblPrescription_tblDoctor")
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Nurse", "StaffNumber1")
                        .WithMany("TblPrescription")
                        .HasForeignKey("StaffNumber")
                        .HasConstraintName("FK_tblPrescription_tblNurse")
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Pharmacist", "StaffNumber2")
                        .WithMany("TblPrescription")
                        .HasForeignKey("StaffNumber")
                        .HasConstraintName("FK_tblPrescription_tblPharmasist")
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Receptionist", b =>
                {
                    b.HasOne("OCMS03.Models.Content.City", "City")
                        .WithMany("TblReceptionist")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_tblReceptionist_tblCity");

                    b.HasOne("OCMS03.Models.Content.Department", "Department")
                        .WithMany("TblReceptionist")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_tblReceptionist_tblDepartment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.District", "District")
                        .WithMany("TblReceptionist")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_tblReceptionist_tblDistrict");

                    b.HasOne("OCMS03.Models.Content.Province", "Province")
                        .WithMany("TblReceptionist")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_tblReceptionist_tblProvince");

                    b.HasOne("OCMS03.Models.Content.Suburb", "Suburb")
                        .WithMany("TblReceptionist")
                        .HasForeignKey("SuburbId")
                        .HasConstraintName("FK_tblReceptionist_tblSuburb")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Suburb", b =>
                {
                    b.HasOne("OCMS03.Models.Content.City", "City")
                        .WithMany("TblSuburb")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_tblSuburb_tblCity")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
